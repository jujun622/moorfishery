import xml.dom.minidom
import os

def generate_pomdpx_file(num_state, num_action, num_obs, initial_belief, transition_model, observation_model, rewards,
                    rho, K, seed, rho_noise_std, path, info=None):

    text = []
    text.append(
        '<pomdpx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.1" id="autogenerated" xsi:noNamespaceSchemaLocation="pomdpx.xsd">')
    ## description
    text.append('<Description>Fishing control</Description>')
    ## discount
    text.append('<Discount>0.95</Discount>')

    ## variables
    # state: stock size
    text.append('<Variable>'
                '<StateVar vnamePrev="state_0" vnameCurr="state_1" fullyObs="false">'
                '<NumValues>' + str(num_state) + '</NumValues>'
                                                      '</StateVar>')
    # # action: current action
    # text.append('<StateVar vnamePrev="action_0" vnameCurr="action_1" fullyObs="true">'
    #             '<NumValues>' + str(num_action) + '</NumValues>'
    #                                                    '</StateVar>')

    # observation: catch
    text.append('<ObsVar vname="catch">'
                '<NumValues>' + str(num_obs) + '</NumValues>'
                                                    '</ObsVar>')

    # action
    text.append('<ActionVar vname="harvest_rate">'
                '<NumValues>' + str(num_action) + '</NumValues>'
                                                       '</ActionVar>')

    text.append('<RewardVar vname="reward_agent"/>')
    text.append('</Variable>')

    ## initial belief
    text.append('<InitialStateBelief>'
                '<CondProb>'
                '<Var>state_0</Var>'
                '<Parent>null</Parent>'
                '<Parameter type="TBL">'
                '<Entry>'
                '<Instance>-</Instance>'
                '<ProbTable>' + ' '.join(initial_belief.astype(str)) + '</ProbTable>'
                                                                            '</Entry>'
                                                                            '</Parameter>'
                                                                            '</CondProb>'
                        #                                                     '<CondProb>'
                        #                                                     '<Var>action_0</Var>'
                        #                                                     '<Parent>null</Parent>'
                        #                                                     '<Parameter type="TBL">'
                        #                                                     '<Entry>'
                        #                                                     '<Instance>-</Instance>'
                        #                                                     '<ProbTable>' + (
                        # (str(1.0 / num_action) + ' ') * num_action) + '</ProbTable>'
                        #                                                         '</Entry>'
                        #                                                         '</Parameter>'
                        #                                                         '</CondProb>'
                                                                                '</InitialStateBelief>')

    text.append('<StateTransitionFunction>'
                '<CondProb>'
                '<Var>state_1</Var>'
                '<Parent>harvest_rate state_0</Parent>'   #'<Parent>harvest_rate action_0 state_0</Parent>'
                '<Parameter type="TBL">')

    for a in range(num_action):
        for s0 in range(num_state):
            for s1 in range(num_state):
                text.append('<Entry>'
                            '<Instance>' + ('a%d s%d s%d' % (a, s0, s1)) + '</Instance>'
                                                                             '<ProbTable>' + str(
                    transition_model[a, s0, s1]) + '</ProbTable>'
                                                        '</Entry>')
    # text.append('</Parameter>' + '</CondProb>')

    # text.append('<CondProb>'
    #             '<Var>action_1</Var>'
    #             '<Parent>harvest_rate state_0 action_0</Parent>'
    #             '<Parameter type="TBL">')
    # for a in range(num_action):
    #     for a1 in range(num_action):
    #         text.append('<Entry>' + '<Instance>' + ('a%d * * s%d' % (a, a1)) + '</Instance>'
    #                                                                            '<ProbTable>' + str(
    #             int(a == a1)) + '</ProbTable>'
    #                             '</Entry>')
    text.append('</Parameter>'
                '</CondProb>'
                '</StateTransitionFunction>')

    ## observation
    text.append('<ObsFunction>'
                '<CondProb>'
                '<Var>catch</Var>'
                '<Parent>harvest_rate state_1</Parent>' #'<Parent>harvest_rate action_1 state_1</Parent>'
                '<Parameter type="TBL">')

    for a in range(num_action):
        for s in range(num_state):
            for o in range(num_obs):
                text.append('<Entry>'
                            '<Instance>' + ('a%d s%d o%d' % (a, s, o)) + '</Instance>'
                                                                           '<ProbTable>' + str(
                    observation_model[s, a, o]) + '</ProbTable>'
                                                       '</Entry>')

    text.append('</Parameter>'
                '</CondProb>'
                '</ObsFunction>')

    # ## reward
    # text.append('<RewardFunction>'
    #             '<Func>'
    #             '<Var>reward_agent</Var>'
    #             '<Parent>harvest_rate state_0 action_0 state_1 action_1</Parent>'
    #             '<Parameter type="TBL">')

    # for i in range(num_action):
    #     for a0 in range(num_action):
    #         for a1 in range(num_action):
    #             if a1 != i:  # never used in simulation, can used arbitrary reward
    #                 text.append('<Entry>'
    #                             '<Instance>' + ('a%d * * * s%d' % (i, a1)) + '</Instance>'
    #                                                                          '<ValueTable>' + str(
    #                     0) + '</ValueTable>'
    #                          '</Entry>')
    #             else:
    #                 # TODO: support different types of penalities
    #                 for s1 in range(num_state):
    #                     text.append('<Entry>'
    #                                 '<Instance>' + ('a%d * s%d s%d s%d' % (i, a0, s1, a1)) + '</Instance>'
    #                                                                                          '<ValueTable>' +
    #                                 str(rewards[s1, a1]) + '</ValueTable>'
    #                                                             '</Entry>')

    # text.append('</Parameter>'
    #             '</Func>'
    #             '</RewardFunction>')
    # text.append('</pomdpx>')

    ## new reward
    text.append('<RewardFunction>'
                '<Func>'
                '<Var>reward_agent</Var>'
                '<Parent>state_1 harvest_rate</Parent>'
                '<Parameter type="TBL">')

    for s in range(num_state):
        for a in range(num_action):
            text.append('<Entry>'
                        '<Instance>' + ('s%d a%d' % (s, a)) + '</Instance>'
                                                                                 '<ValueTable>' +
                        str(rewards[s, a]) + '</ValueTable>'
                                               '</Entry>')

    text.append('</Parameter>'
                '</Func>'
                '</RewardFunction>')
    text.append('</pomdpx>')

    filename = '%s_rho%.4f_K%.4f_seed%d_rho%.4f.pomdpx' % (
        info, rho, K, seed, rho_noise_std)

    filename = os.path.join(path, filename)

    with open(filename, 'w') as f:
        dom = xml.dom.minidom.parseString(''.join(text))
        f.write(dom.toprettyxml())
    print('generated %s' % (filename))

    return filename

